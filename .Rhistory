#require(ggplot2)
xlnorm6a<-data.frame(xlnorm6)
dim(xlnorm6a)
lower<-mean(xlnorm6a$xlnorm6)-3*sd(xlnorm6a$xlnorm6)
upper<-mean(xlnorm6a$xlnorm6)+3*sd(xlnorm6a$xlnorm6)
upper1<-round(upper,digits=2)
outer<-round(outfence,digits=2)
#xlnorm6b<-xlnorm6a
xlnorm6a$Level<-c(" ")
bplot1<-ggplot(xlnorm6a, aes(x=factor(Level),y=xlnorm6))  + geom_boxplot()+ coord_flip()
bplot2<-bplot1 + scale_y_continuous(breaks = c(0.00,2.00,4.00,6.00, 8.00,10.00,20.00,30.00), labels=c("0","2","4","6","8","10","20","30")) +
theme(axis.text.x=element_text(angle=90)) +
geom_hline(yintercept=outfence,
linetype=1,
color="red",
labels="Out Fence",
show_guide=TRUE) +
#annotate("text", y = outfence,  x = .8,  label = "Outter", angle=90) +
geom_hline(yintercept=upper,
linetype=1,
color="blue",
labels="3sd",
show_guide=TRUE) +
#annotate("text", y = upper,  x = .8,  label = "3sd", angle=90) +
xlab(" ") + ylab("Data Points")+
geom_line(aes(y=outfence, colour="Outter Fence")) +
geom_line(aes(y=upper, colour="3SD")) +
scale_colour_manual(values=c("blue", "red")) +
theme(legend.title=element_blank())+
theme(legend.position="top") +
xlab(" ") + ylab("Data Points ")+
annotate("text", x = 1.4, y=6.9,  label = "C")
bplot2
bplot2<-bplot1 + scale_y_continuous(breaks = c(0.00,2.00,4.00,6.00, 8.00,10.00,20.00,30.00), labels=c("0","2","4","6","8","10","20","30")) +
theme(axis.text.x=element_text(angle=90)) +
geom_hline(yintercept=outfence,
linetype=1,
color="red",
labels="Out Fence",
show_guide=TRUE) +
#annotate("text", y = outfence,  x = .8,  label = "Outter", angle=90) +
geom_hline(yintercept=upper,
linetype=1,
color="blue",
labels="3sd",
show_guide=TRUE) +
#annotate("text", y = upper,  x = .8,  label = "3sd", angle=90) +
xlab(" ") + ylab("Data Points")+
geom_line(aes(y=outfence, colour="Outter Fence")) +
geom_line(aes(y=upper, colour="3SD")) +
scale_colour_manual(values=c("blue", "red")) +
theme(legend.title=element_blank())+
theme(legend.position="top") +
xlab(" ") + ylab("Data Points ")+
annotate("text", x = 1.4, y=5.9,  label = "C")
bplot2
grid.arrange(graphobj1, graphobj3, bplot2, b2, nrow=2)
sessionInfo()
source('C:/Users/KathyWarner/Documents/BusinessDocs/OmniCell/Diversion/Analysis/Diversion.r')
trainSpam$numType = as.numeric(trainSpam$type) - 1
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[,1:5])
set.seed(3435)
trainIndicator<-rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam=spam[trainIndicator == 1,]
testSpam=spam[trainIndicator == 0,]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
trainSpam$numType = as.numeric(trainSpam$type) - 1
trainSpam$numType
trainSpam$type
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
cvError
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
## Which predictor has minimum cross-validated error?
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
## Classification table
table(predictedSpam, testSpam$type)
##
## predictedSpam nonspam spam
## nonspam 1346 458
## spam 61 449
## Error rate
(61 + 458)/(1346 + 458 + 61 + 449)
library(stats)
head(airquality)
fit<-lm(Ozone ~ Wind + Solar.R + Temp, data =airquality)
head(fit)
```
#load and unzip the data
libs <- c('dplyr', 'moments', 'ggplot2', 'latticeExtra', 'gridExtra', 'MASS',
'colorspace', 'plyr', 'Hmisc', 'scales', 'qdap')
lapply(libs, require, character.only = T)
fileURL<-"https://d396qusza40orc.cloudfront.net/repdata/data/activity.zip"
download.file(fileURL, destfile="./activity.zip")
unzip(zipfile="activity.zip")
activity <- read.csv("activity.csv")
My First R Markdown File
========================
Load and unzip the data
```{r}
fileURL<-"https://d396qusza40orc.cloudfront.net/repdata/data/activity.zip"
setwd("C://Users//KathyWarner.KATHYSDESKTOP//Documents//R//Working//Coursera")
download.file(fileURL, destfile="./activity.zip", method="curl")
unzip(zipfile="activity.zip")
activity <- read.csv("activity.csv")
head(activity)
```
libs <- c('dplyr', 'moments', 'ggplot2', 'latticeExtra', 'gridExtra', 'MASS',
'colorspace', 'plyr', 'Hmisc', 'scales', 'qdap')
lapply(libs, require, character.only = T)
suppress.messages(lapply(libs, require, character.only = T))
suppressMessages(lapply(libs, require, character.only = T))
#load and unzip the data
libs <- c('dplyr', 'moments', 'ggplot2', 'latticeExtra', 'gridExtra', 'MASS',
'colorspace', 'plyr', 'Hmisc', 'scales')
suppressMessages(lapply(libs, require, character.only = T))
libs <- c('dplyr', 'moments', 'ggplot2', 'latticeExtra', 'gridExtra', 'MASS',
'colorspace', 'plyr', 'Hmisc', 'scales')
invisible(lapply(libs, require, character.only = T))
========================
libs <- c('dplyr', 'moments', 'ggplot2', 'latticeExtra', 'gridExtra', 'MASS',
'colorspace', 'plyr', 'Hmisc', 'scales', 'qdap')
invisible(lapply(libs, require, character.only = T))
setwd("C://Users//KathyWarner.KATHYSDESKTOP//Documents//GitHub//RepData_PeerAssessment1")
fileURL<-"./activity.zip"
unzip(zipfile="./activity.zip")
activity <- read.csv("./activity.csv")
NArows<-lapply(apply(activity,1, function(x) which(is.na(x))), paste, collapse=", ")
class(NArows)
length(NArows)
NArows
NArows<-apply(activity,1, function(x) which(is.na(x)))
length(NArows)
apply(activity,1, function(x) which(is.na(x)))
class(NArows)
summary(NArows)
sum(NArows)
type(NArows)
is.numeric(NArows)
NArows<-as.numeric(apply(activity,1, function(x)) which(is.na(x)))
NArows<-as.numeric(apply(activity,1, function(x) which(is.na(x))))
class(NArows)
sum(NArows)
NArows
unclass(NArows)
NArows
unclass(NArows)
NArows<-(apply(activity,1, function(x) which(is.na(x)))
NArows
NArows
NArows<-apply(activity,1, function(x) which(is.na(x)))
NArows
unclass(NArows)
NArows
head(activity)
NArows<-sapply(apply(activity,1, function(x) which(is.na(x))), paste, collapse=", ")
class(NArows)
sum(as.numeric(NArows))
NArows<-apply(activity,1, function(x) is.na(x))
NArows
NArows
NArows[1,1]
sum(NArows)
NArows<-is.na(activity$steps)
sum(NArows)
averages
libs <- c('dplyr', 'moments', 'ggplot2', 'latticeExtra', 'gridExtra', 'MASS',
'colorspace', 'plyr', 'Hmisc', 'scales')
invisible(lapply(libs, require, character.only = T))
setwd("C://Users//KathyWarner.KATHYSDESKTOP//Documents//GitHub//RepData_PeerAssessment1")
fileURL<-"./activity.zip"
unzip(zipfile="./activity.zip")
activity <- read.csv("./activity.csv")
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval),
FUN=mean, na.rm=TRUE)
averages
NArows
activity[2017,]
averages[2017,]
averages[1,]
activity[1,]
rename(average, c(steps=isteps))
rename(averages, c(steps=isteps))
rename(averages, c("steps"="isteps"))
rename(averages, c("steps"="isteps"))
newData<-merge(activity, average, by="interval")
newData<-merge(activity, averages, by="interval")
head(newData)
nrows(newData)
rownum(newData)
nrow(newData)
averages[2017,]
activity[1,]
newData[1,]
rename(averages, c("steps"="isteps"))
newData<-merge(activity, averages, by="interval")
newData[1,]
averages<-rename(averages, c("steps"="isteps"))
newData<-merge(activity, averages, by="interval")
newData[1,]
newData[1500,]
newData[2500,]
newData[3500,]
newData[4500,]
newData[5500,]
newData[6500,]
newData[7500,]
newData[7501,]
newData[7502,]
newData$steps <- ifelse(is.na(newData$steps), isteps, steps)
newData$steps <- ifelse(is.na(newData$steps), newData$isteps, newData$steps)
newData$steps <- ifelse(is.na(newData$steps), newData$isteps, newData$steps)
newData[1,]
newData<-newData[,1:3]
head(newData)
activity[2,]
dim(newData)
activity[1,]
newData[289,]
mean(Totalsteps1, na.rm=TRUE)
median(Totalsteps1, na.rm=TRUE)
Totalsteps1<-with(newData,(tapply(steps,date,sum, na.rm=TRUE)))
mean(Totalsteps1, na.rm=TRUE)
median(Totalsteps1, na.rm=TRUE)
head(newData)
setwd("C://Users//KathyWarner.KATHYSDESKTOP//Documents//GitHub//RepData_PeerAssessment1")
fileURL<-"./activity.zip"
unzip(zipfile="./activity.zip")
activity <- read.csv("./activity.csv")
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
## ------------------------------------------------------------------------
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
## ------------------------------------------------------------------------
averages[which.max(averages$steps),]
activity
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
data <- read.csv("./activity.csv")
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
## ------------------------------------------------------------------------
averages[which.max(averages$steps),]
missing <- is.na(data$steps)
# How many missing
table(missing)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
## ------------------------------------------------------------------------
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps)
median(total.steps)
library(lubridate)
newData$date <- as.Date(newData$date)
wday(newData$date, label=TRUE)
head(newData)
newData$week<-ifelse(newData$date  %in% c("Sun", "Mon", "Tues", "Wed", "Thurs", "Fri", "Sat"), 'Weekday', 'Weekend')
head(newData)
tail(newData)
tail(newData,25)
tail(newData,50)
head(newData,50)
head(newData,250)
ifelse(newData$date  %in% c("Sun", "Mon", "Tues", "Wed", "Thurs", "Fri", "Sat"), 'Weekday', 'Weekend')
ifelse(wday(newData$date)  %in% c("Sun", "Mon", "Tues", "Wed", "Thurs", "Fri", "Sat"), 'Weekday', 'Weekend')
wday(newData$date)
ifelse(wday(newData$date, label=TRUE)  %in% c("Sun", "Mon", "Tues", "Wed", "Thurs", "Fri", "Sat"), 'Weekday', 'Weekend')
head(newData,250)
tail(newData,250)
ifelse(wday(newData$date, label=TRUE)  %in% c("Mon", "Tues", "Wed", "Thurs", "Fri"), 'Weekday', 'Weekend')
tail(newData,250)
head(newData,250)
newData$week<-ifelse(wday(newData$date, label=TRUE)  %in% c("Mon", "Tues", "Wed", "Thurs", "Fri"), 'Weekday', 'Weekend')
head(newData,250)
class(newData$week)
newData$week<-as.factor(newData$week)
class(newData$week)
newavg <- aggregate(x=list(steps=newData$steps), by=list(Week=newData$week),
FUN=mean, na.rm=TRUE)
head(newavg)
head(newData)
newData$intavg <- aggregate(x=list(steps=newData$steps), by=list(interval=newData$interval),
FUN=mean, na.rm=TRUE)
newData$intavg<-aggregate(x=list(steps=newData$steps), by=list(interval=newData$interval),
FUN=mean, na.rm=TRUE)
intavg<-aggregate(x=list(steps=newData$steps), by=list(interval=newData$interval),
FUN=mean, na.rm=TRUE)
head(intavg)
newData %>%
group_by(interval, week) %>%
summarise(funs(mean), steps)
head(newData)
newData1<-newData %>%
group_by(interval, week)
head(newData1)
newData1<-newData %>%
group_by(interval, week) %>%
summarise(stepsby=mean(steps)
)
head(newData1)
newData$stepsby<-newData %>%
group_by(interval, week) %>%
summarise(stepsby=mean(steps))
newData1<-newData %>%
group_by(interval, week)
head(newData1)
newData %>%
group_by(interval, week) %>%
summarise(stepsby=mean(steps))
head(newData)
newData %>%
group_by(interval, week) %>%
summarise(stepsby=mean(steps))%>%
arrange(desc(stepsby))
newData %>%
group_by(interval, week) %>%
arrange(desc(interval))
newData %>%
group_by(interval, week) %>%
summarise(stepsby=mean(steps))%>%
arrange(desc(interval,week))
class(newData)
newData1<-newData[with(newData, order(interval, week)), ]
head(newData1,50)
groupColumns = c("interval","week")
dataColumns = c("steps")
newData1 = ddply(newData, groupColumns, function(x) mean(x[dataColumns]))
groupColumns
dataColumns
ddply(newData, groupColumns, function(x) mean(x[dataColumns]))
ddply(newData, groupColumns, function(x) mean(dataColumns))
ddply(newData, groupColumns, mean(dataColumns))
tdply(newData, groupColumns, dataColumns, mean)
tapply(newData, groupColumns, dataColumns, mean)
groupColumns
tapply(newData$steps ,list(newData$interval,newData$week) , mean)
newData1<-tapply(newData$steps ,list(newData$interval,newData$week) , mean)
head(newData1,50)
class(interval)
newData1$interval<-as.factor(newData1$interval)
class(newData1)
newData1<-as.datafram(newData1)
newData1<-as.dataframe(newData1)
newData1<-dataframe(newData1)
as.data.frame(as.table(NewData1))
newData1<-tapply(newData$steps ,list(newData$interval,newData$week) , mean)
as.data.frame(as.table(newData1))
class(newData1)
newData1<-as.data.frame(as.table(newData1))
class(newData1)
class(newData1$interval)
names(newData1)
head(newData1)
colnames(newData1)[1]<-"interval"
colnames(newData1)[2]<-"week"
colnames(newData1)[3]<-"avgsteps"
names(newData1)
class(newData1$interval)
graphobj<-ggplot(newData1, aes(x=factor(interval))  + geom_plot()
)
hp <- ggplot(steps, aes(x=interval))
hp <- plot(steps, aes(x=interval))
plot(steps, aes(x=interval))
plot(newData1$steps, newData1$interval)
plot(newData1$steps)
plot(newData1$steps)
names(newData1)
plot(newData1$interval, newData1$avgsteps)
plot(newData1$interval, newData1$avgsteps, type=1)
plot(newData1$interval, newData1$avgsteps,type='1')
hp <- plot(newData1$interval, newData1$avgsteps,type='1')
hp + facet_grid(week ~ steps)
hp + facet_grid(week)
hp + facet_grid(. ~ week)
hp + facet_grid(. ~ newData1$week)
newData1$week
hp <- plot(newData1$interval, newData1$avgsteps,type='1')
hp
hp
hp + facet_grid(. ~ newData1$week)
names(newData1)
aqw <- dcast(newData, interval  ~ variable)
aqw <- dcast(newData1, interval  ~ variable)
library(reshape2)
aqw <- dcast(newData1, interval  ~ variable)
head(newData1)
aqw <- dcast(newData1, interval  ~ variable, value.var=avgsteps)
aqw <- dcast(newData1, interval  ~ week, value.var=avgsteps)
aqw <- dcast(newData1, interval  ~ variable, value.var='avgsteps')
dcast(newData1, interval  ~ week, value.var='avgsteps')
dcastData <- dcast(newData1, interval  ~ week, value.var='avgsteps')
hp <- plot(newData1$interval, newData1$weekday,type='1')
plot(newData1$interval, newData1$weekday)
plot(dcastData$interval, dcastData$weekday)
head(dcastData)
class(dcastData$interval)
class(dcastData$weekday)
dcastData$weekday
head(dcastData)
class(dcastData$Weekday)
hp <- plot(dcastData$interval, dcastData$Weekday)
graphobj1<-ggplot(data=dcastData, aes(x=interval, y=avgsteps)) +
geom_line()
graphobj1
head(dcastData)
graphobj1<-ggplot(data=dcastData, aes(x=interval, y=Weekday))
graphobj1
graphobj1<-ggplot(data=dcastData, aes(x=interval, y=Weekday)) +
geom_line()
graphobj1
newData1<-tapply(newData$steps ,list(newData$interval,newData$week) , mean)
head(newData1)
head(newData)
min(newData$steps)
max(newData$steps)
newData1<-tapply(newData$steps ,list(newData$interval,newData$week) , mean)
head(newData1)
newData1<-as.data.frame(as.table(newData1))
colnames(newData1)[1]<-"interval"
colnames(newData1)[2]<-"week"
colnames(newData1)[3]<-"avgsteps"
head(newData1)
head(newData1,50)
tail(newData1,50)
max(newData1$avgsteps)
min(newData1$avgsteps)
g <- ggplot(newData1, aes(x =interval, y = avgsteps))
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
g + facet_grid(. ~ week)
g
g <- ggplot(newData1, aes(x =interval, y = avgsteps))
g + geom_line() + coord_cartesian(ylim = c(-4, 4))
g <- ggplot(newData1, aes(x =interval, y = avgsteps))
g + geom_line() + facet_grid(. ~ week)
tail(newData1,50)
min(newData1$avgsteps)
max(newData1$avgsteps)
g <- ggplot(newData1, aes(x =interval, y = avgsteps))
g + geom_line(aes(color=week))
cutpoints <- quantile(newData1$interval, seq(0, 1, length = 4), na.rm = TRUE)
newData1 <- aggregate(steps ~ interval + day, data=newData, mean)
head(newData)
newData1 <- aggregate(steps ~ interval + week, data=newData, mean)
head(newData1)
class(newData1)
g <- ggplot(newData1, aes(x =interval, y = steps))
g + geom_line(aes(color=week))
g <- ggplot(newData1, aes(x =interval, y = steps))
g + geom_line(aes(color=week)) + facet_grid(. ~ week)
g <- ggplot(newData1, aes(x =interval, y = steps))
g + geom_line() + facet_grid(week ~ .)
g <- ggplot(newData1, aes(x =interval, y = steps))
g + geom_line() + facet_wrap(week ~ .)
g <- ggplot(newData1, aes(x =interval, y = steps))
g + geom_line() + facet_wrap(~week)
g <- ggplot(newData1, aes(x =interval, y = steps))
g + geom_line() + facet_wrap(~week) +
labs(x = ("Interval") +
labs(y = "Number of Steps")
)
g <- ggplot(newData1, aes(x =interval, y = steps))
g + geom_line() + facet_wrap(~week) +
labs(x = "Interval") +
labs(y = "Number of Steps")
g <- ggplot(newData1, aes(x =interval, y = steps))
g + geom_line() + facet_wrap(~week) +
labs(x = "5-Minute Interval") +
labs(y = "Average Number of Steps")
hist(Totalsteps, xlab="Total Number of Steps Taken Each Day", main="Total Steps")
